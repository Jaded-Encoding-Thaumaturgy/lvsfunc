import torch.nn as nn
from typing import Any

def sequential(*args: Any): ...
def conv(in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...): ...
def pixel_unshuffle(input: Any, upscale_factor: Any): ...

class PixelUnShuffle(nn.Module):
    upscale_factor: Any = ...
    def __init__(self, upscale_factor: Any) -> None: ...
    def forward(self, input: Any): ...
    def extra_repr(self): ...

class ConditionalBatchNorm2d(nn.Module):
    num_features: Any = ...
    bn: Any = ...
    embed: Any = ...
    def __init__(self, num_features: Any, num_classes: Any) -> None: ...
    def forward(self, x: Any, y: Any): ...

class ConcatBlock(nn.Module):
    sub: Any = ...
    def __init__(self, submodule: Any) -> None: ...
    def forward(self, x: Any): ...

class ShortcutBlock(nn.Module):
    sub: Any = ...
    def __init__(self, submodule: Any) -> None: ...
    def forward(self, x: Any): ...

class ResBlock(nn.Module):
    res: Any = ...
    def __init__(self, in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...) -> None: ...
    def forward(self, x: Any): ...

class IMDBlock(nn.Module):
    d_nc: Any = ...
    r_nc: Any = ...
    conv1: Any = ...
    conv2: Any = ...
    conv3: Any = ...
    conv4: Any = ...
    conv1x1: Any = ...
    def __init__(self, in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., d_rate: float = ..., negative_slope: float = ...) -> None: ...
    def forward(self, x: Any): ...

class CALayer(nn.Module):
    avg_pool: Any = ...
    conv_fc: Any = ...
    def __init__(self, channel: int = ..., reduction: int = ...) -> None: ...
    def forward(self, x: Any): ...

class RCABlock(nn.Module):
    res: Any = ...
    ca: Any = ...
    def __init__(self, in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., reduction: int = ..., negative_slope: float = ...) -> None: ...
    def forward(self, x: Any): ...

class RCAGroup(nn.Module):
    rg: Any = ...
    def __init__(self, in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., reduction: int = ..., nb: int = ..., negative_slope: float = ...) -> None: ...
    def forward(self, x: Any): ...

class ResidualDenseBlock_5C(nn.Module):
    conv1: Any = ...
    conv2: Any = ...
    conv3: Any = ...
    conv4: Any = ...
    conv5: Any = ...
    def __init__(self, nc: int = ..., gc: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...) -> None: ...
    def forward(self, x: Any): ...

class RRDB(nn.Module):
    RDB1: Any = ...
    RDB2: Any = ...
    RDB3: Any = ...
    def __init__(self, nc: int = ..., gc: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...) -> None: ...
    def forward(self, x: Any): ...

def upsample_pixelshuffle(in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...): ...
def upsample_upconv(in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...): ...
def upsample_convtranspose(in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...): ...
def downsample_strideconv(in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...): ...
def downsample_maxpool(in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...): ...
def downsample_avgpool(in_channels: int = ..., out_channels: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., mode: str = ..., negative_slope: float = ...): ...

class NonLocalBlock2D(nn.Module):
    inter_nc: Any = ...
    W: Any = ...
    theta: Any = ...
    phi: Any = ...
    g: Any = ...
    def __init__(self, nc: int = ..., kernel_size: int = ..., stride: int = ..., padding: int = ..., bias: bool = ..., act_mode: str = ..., downsample: bool = ..., downsample_mode: str = ..., negative_slope: float = ...) -> None: ...
    def forward(self, x: Any): ...
