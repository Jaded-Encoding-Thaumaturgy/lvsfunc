import torch.nn as nn
from typing import Any

class UNet(nn.Module):
    m_head: Any = ...
    m_down1: Any = ...
    m_down2: Any = ...
    m_down3: Any = ...
    m_body: Any = ...
    m_up3: Any = ...
    m_up2: Any = ...
    m_up1: Any = ...
    m_tail: Any = ...
    def __init__(self, in_nc: int = ..., out_nc: int = ..., nc: Any = ..., nb: int = ..., act_mode: str = ..., downsample_mode: str = ..., upsample_mode: str = ...) -> None: ...
    def forward(self, x0: Any): ...

class UNetRes(nn.Module):
    m_head: Any = ...
    m_down1: Any = ...
    m_down2: Any = ...
    m_down3: Any = ...
    m_body: Any = ...
    m_up3: Any = ...
    m_up2: Any = ...
    m_up1: Any = ...
    m_tail: Any = ...
    def __init__(self, in_nc: int = ..., out_nc: int = ..., nc: Any = ..., nb: int = ..., act_mode: str = ..., downsample_mode: str = ..., upsample_mode: str = ...) -> None: ...
    def forward(self, x0: Any): ...

class ResUNet(nn.Module):
    m_head: Any = ...
    m_down1: Any = ...
    m_down2: Any = ...
    m_down3: Any = ...
    m_body: Any = ...
    m_up3: Any = ...
    m_up2: Any = ...
    m_up1: Any = ...
    m_tail: Any = ...
    def __init__(self, in_nc: int = ..., out_nc: int = ..., nc: Any = ..., nb: int = ..., act_mode: str = ..., downsample_mode: str = ..., upsample_mode: str = ...) -> None: ...
    def forward(self, x: Any): ...

class UNetResSubP(nn.Module):
    m_ps_down: Any = ...
    m_ps_up: Any = ...
    m_head: Any = ...
    m_down1: Any = ...
    m_down2: Any = ...
    m_down3: Any = ...
    m_body: Any = ...
    m_up3: Any = ...
    m_up2: Any = ...
    m_up1: Any = ...
    m_tail: Any = ...
    def __init__(self, in_nc: int = ..., out_nc: int = ..., nc: Any = ..., nb: int = ..., act_mode: str = ..., downsample_mode: str = ..., upsample_mode: str = ...) -> None: ...
    def forward(self, x0: Any): ...

class UNetPlus(nn.Module):
    m_head: Any = ...
    m_down1: Any = ...
    m_down2: Any = ...
    m_down3: Any = ...
    m_body: Any = ...
    m_up3: Any = ...
    m_up2: Any = ...
    m_up1: Any = ...
    m_tail: Any = ...
    def __init__(self, in_nc: int = ..., out_nc: int = ..., nc: Any = ..., nb: int = ..., act_mode: str = ..., downsample_mode: str = ..., upsample_mode: str = ...) -> None: ...
    def forward(self, x0: Any): ...

class NonLocalUNet(nn.Module):
    m_head: Any = ...
    m_down1: Any = ...
    m_down2: Any = ...
    m_down3: Any = ...
    m_body: Any = ...
    m_up3: Any = ...
    m_up2: Any = ...
    m_up1: Any = ...
    m_tail: Any = ...
    def __init__(self, in_nc: int = ..., out_nc: int = ..., nc: Any = ..., nb: int = ..., act_mode: str = ..., downsample_mode: str = ..., upsample_mode: str = ...) -> None: ...
    def forward(self, x0: Any): ...
